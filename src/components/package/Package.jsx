import React, { useState, useEffect } from "react";
import SidebarNav from "../layouts/SidebarNav";
import {
  createPaymentApi,
  getMyPackagesApi,
} from "../../services/Userservices";

const packageDetails = {
  BASIC: {
    title: "BASIC",
    price: 10000,
    description:
      "ƒêƒÉng t·ªëi ƒëa 10 b√†i. Kh√¥ng h·ªó tr·ª£ ƒëƒÉng video. Ph√π h·ª£p cho ng∆∞·ªùi d√πng m·ªõi ho·∫∑c ƒëƒÉng th·ª≠ nghi·ªám.",
    icon: "üè†",
    color: "from-blue-400 to-blue-600",
    buttonColor: "bg-blue-500 hover:bg-blue-600",
  },
  PROFESSIONAL: {
    title: "PROFESSIONAL",
    price: 100000,
    description:
      "ƒêƒÉng t·ªëi ƒëa 30 b√†i. H·ªó tr·ª£ ƒëƒÉng ·∫£nh v√† video. Th√≠ch h·ª£p cho ng∆∞·ªùi t√¨m ki·∫øm b·∫°n c√πng ph√≤ng ho·∫∑c cho thu√™ nhi·ªÅu h∆°n.",
    icon: "üè¢",
    color: "from-green-400 to-green-600",
    buttonColor: "bg-green-500 hover:bg-green-600",
  },
  VIP: {
    title: "VIP",
    price: 150000,
    description:
      "ƒêƒÉng t·ªëi ƒëa 100 b√†i. ∆Øu ti√™n hi·ªÉn th·ªã b√†i ƒëƒÉng, h·ªó tr·ª£ ·∫£nh & video. L·ª±a ch·ªçn t·ªëi ∆∞u cho m√¥i gi·ªõi ho·∫∑c ng∆∞·ªùi cho thu√™ chuy√™n nghi·ªáp.",
    icon: "üëë",
    color: "from-yellow-400 to-yellow-600",
    buttonColor: "bg-yellow-500 hover:bg-yellow-600",
  },
  VR: {
    title: "VR",
    price: 200000,
    description:
      "ƒêƒÉng t·ªëi ƒëa 3 b√†i v·ªõi h·ªó tr·ª£ VR 360¬∞. Gi√∫p ng∆∞·ªùi xem tr·∫£i nghi·ªám th·ª±c t·∫ø kh√¥ng gian ph√≤ng tr∆∞·ªõc khi li√™n h·ªá.",
    icon: "ü•Ω",
    color: "from-purple-400 to-purple-600",
    buttonColor: "bg-purple-500 hover:bg-purple-600",
  },
};

const Package = () => {
  const [loading, setLoading] = useState({});
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(null);
  const [countdown, setCountdown] = useState(0);
  const [userPackages, setUserPackages] = useState([]);
  const [packagesLoading, setPackagesLoading] = useState(true);
  const [showPackagesModal, setShowPackagesModal] = useState(false);

  useEffect(() => {
    fetchUserPackages();
  }, []);

  const fetchUserPackages = async () => {
    try {
      setPackagesLoading(true);
      const response = await getMyPackagesApi();
      setUserPackages(response.data || []);
    } catch (err) {
      console.error("Error fetching user packages:", err);
      // Don't show error for packages, just keep empty array
    } finally {
      setPackagesLoading(false);
    }
  };

  const formatCurrency = (amount) => {
    return new Intl.NumberFormat("vi-VN", {
      style: "currency",
      currency: "VND",
    }).format(amount);
  };

  const handleBuyPackage = async (packageType) => {
    setLoading((prev) => ({ ...prev, [packageType]: true }));
    setError(null);
    setSuccess(null);

    try {
      const paymentData = {
        packageType: packageType,
        description: `Mua g√≥i ${packageDetails[packageType].title}`,
        returnUrl: `${window.location.origin}/payment/success`,
        cancelUrl: `${window.location.origin}/payment/cancel`,
      };

      const response = await createPaymentApi(paymentData);

      if (
        response.data &&
        response.data.data &&
        response.data.data.checkoutUrl
      ) {
        setSuccess(
          `ƒêang chuy·ªÉn h∆∞·ªõng ƒë·∫øn trang thanh to√°n cho g√≥i ${packageType}...`
        );
        setCountdown(3);

        // Countdown timer
        const countdownInterval = setInterval(() => {
          setCountdown((prev) => {
            if (prev <= 1) {
              clearInterval(countdownInterval);
              window.location.href = response.data.data.checkoutUrl;
              return 0;
            }
            return prev - 1;
          });
        }, 1000);
      } else {
        throw new Error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c URL thanh to√°n");
      }
    } catch (err) {
      console.error("Payment creation error:", err);
      setError(
        err.response?.data?.message ||
          err.message ||
          "C√≥ l·ªói x·∫£y ra khi t·∫°o thanh to√°n"
      );
      setCountdown(0);
    } finally {
      setLoading((prev) => ({ ...prev, [packageType]: false }));
      // Refresh packages after successful purchase attempt
      setTimeout(() => {
        fetchUserPackages();
      }, 2000);
    }
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString("vi-VN");
  };

  const getPackageStatus = (expiredAt) => {
    const now = new Date();
    const expireDate = new Date(expiredAt);
    const daysLeft = Math.ceil((expireDate - now) / (1000 * 60 * 60 * 24));

    if (daysLeft <= 0)
      return { status: "ƒê√£ h·∫øt h·∫°n", color: "text-red-600 bg-red-100" };
    if (daysLeft <= 7)
      return {
        status: `C√≤n ${daysLeft} ng√†y`,
        color: "text-yellow-600 bg-yellow-100",
      };
    return {
      status: `C√≤n ${daysLeft} ng√†y`,
      color: "text-green-600 bg-green-100",
    };
  };

  return (
    <SidebarNav>
      <div className="bg-white rounded-lg shadow">
        <div className="p-6">
          <div className="py-10 bg-gradient-to-br from-gray-50 to-gray-100 text-center rounded-lg">
            <h2 className="text-3xl font-bold mb-4 bg-gradient-to-r from-orange-500 to-red-500 bg-clip-text text-transparent">
              G√≥i D·ªãch V·ª• RoomieHub
            </h2>
            <p className="text-gray-600 mb-6">
              L·ª±a ch·ªçn g√≥i ph√π h·ª£p v·ªõi nhu c·∫ßu ƒëƒÉng b√†i c·ªßa b·∫°n
            </p>

            {/* Button to show current packages */}
            {!packagesLoading && userPackages.length > 0 && (
              <div className="mb-8">
                <button
                  onClick={() => setShowPackagesModal(true)}
                  className="bg-gradient-to-r from-orange-500 to-red-500 text-white px-6 py-3 rounded-lg font-semibold hover:from-orange-600 hover:to-red-600 transition-all duration-200 shadow-lg hover:shadow-xl transform hover:-translate-y-1"
                >
                  <div className="flex items-center">
                    <span className="text-xl mr-2">üì¶</span>
                    Xem g√≥i hi·ªán t·∫°i ({userPackages.length})
                  </div>
                </button>
              </div>
            )}

            {/* Success/Error Messages */}
            {success && (
              <div className="mb-6 p-4 bg-green-100 border border-green-400 text-green-700 rounded-lg max-w-md mx-auto">
                <div className="flex items-center justify-center">
                  <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-green-600 mr-2"></div>
                  <span>{success}</span>
                </div>
                {countdown > 0 && (
                  <div className="mt-2 text-sm">
                    Chuy·ªÉn h∆∞·ªõng sau{" "}
                    <span className="font-bold text-green-800">
                      {countdown}
                    </span>{" "}
                    gi√¢y
                  </div>
                )}
              </div>
            )}

            {error && (
              <div className="mb-6 p-4 bg-red-100 border border-red-400 text-red-700 rounded-lg max-w-md mx-auto">
                {error}
              </div>
            )}

            <h3 className="text-2xl font-bold mb-6 text-gray-800">
              üõí Mua th√™m g√≥i m·ªõi
            </h3>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 px-4">
              {Object.entries(packageDetails).map(([packageType, pkg]) => (
                <div
                  key={packageType}
                  className="bg-white rounded-xl shadow-lg p-6 border border-gray-200 hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1"
                >
                  {/* Header with gradient */}
                  <div
                    className={`bg-gradient-to-r ${pkg.color} rounded-lg p-4 mb-4 text-white`}
                  >
                    <div className="text-4xl mb-2">{pkg.icon}</div>
                    <h3 className="text-xl font-bold">{pkg.title}</h3>
                  </div>

                  {/* Price */}
                  <div className="mb-4">
                    <p className="text-2xl font-bold text-gray-800">
                      {formatCurrency(pkg.price)}
                    </p>
                    <p className="text-gray-500 text-sm">m·ªôt l·∫ßn</p>
                  </div>

                  {/* Description */}
                  <p className="text-gray-600 text-sm mb-6 leading-relaxed">
                    {pkg.description}
                  </p>

                  {/* Buy Button */}
                  <button
                    onClick={() => handleBuyPackage(packageType)}
                    disabled={loading[packageType]}
                    className={`w-full ${pkg.buttonColor} text-white px-6 py-3 rounded-lg font-semibold transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed`}
                  >
                    {loading[packageType] ? (
                      <div className="flex items-center justify-center">
                        <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                        ƒêang x·ª≠ l√Ω...
                      </div>
                    ) : (
                      "Mua ngay"
                    )}
                  </button>

                  {/* Features based on package type */}
                  <div className="mt-6 pt-4 border-t border-gray-200">
                    <ul className="text-sm text-left text-gray-700 space-y-2">
                      {packageType === "BASIC" && (
                        <>
                          <li className="flex items-center">
                            <span className="text-green-500 mr-2">‚úì</span>
                            T·ªëi ƒëa 10 b√†i ƒëƒÉng
                          </li>
                          <li className="flex items-center">
                            <span className="text-green-500 mr-2">‚úì</span>
                            H·ªó tr·ª£ c∆° b·∫£n
                          </li>
                          <li className="flex items-center">
                            <span className="text-red-500 mr-2">‚úó</span>
                            Kh√¥ng h·ªó tr·ª£ video
                          </li>
                        </>
                      )}
                      {packageType === "PROFESSIONAL" && (
                        <>
                          <li className="flex items-center">
                            <span className="text-green-500 mr-2">‚úì</span>
                            T·ªëi ƒëa 30 b√†i ƒëƒÉng
                          </li>
                          <li className="flex items-center">
                            <span className="text-green-500 mr-2">‚úì</span>
                            H·ªó tr·ª£ ·∫£nh v√† video
                          </li>
                          <li className="flex items-center">
                            <span className="text-green-500 mr-2">‚úì</span>
                            ∆Øu ti√™n h·ªó tr·ª£
                          </li>
                        </>
                      )}
                      {packageType === "VIP" && (
                        <>
                          <li className="flex items-center">
                            <span className="text-green-500 mr-2">‚úì</span>
                            T·ªëi ƒëa 100 b√†i ƒëƒÉng
                          </li>
                          <li className="flex items-center">
                            <span className="text-green-500 mr-2">‚úì</span>
                            ∆Øu ti√™n hi·ªÉn th·ªã
                          </li>
                          <li className="flex items-center">
                            <span className="text-green-500 mr-2">‚úì</span>
                            H·ªó tr·ª£ ·∫£nh & video
                          </li>
                          <li className="flex items-center">
                            <span className="text-green-500 mr-2">‚úì</span>
                            H·ªó tr·ª£ 24/7
                          </li>
                        </>
                      )}
                      {packageType === "VR" && (
                        <>
                          <li className="flex items-center">
                            <span className="text-green-500 mr-2">‚úì</span>
                            T·ªëi ƒëa 3 b√†i VR 360¬∞
                          </li>
                          <li className="flex items-center">
                            <span className="text-green-500 mr-2">‚úì</span>
                            Tr·∫£i nghi·ªám th·ª±c t·∫ø ·∫£o
                          </li>
                          <li className="flex items-center">
                            <span className="text-green-500 mr-2">‚úì</span>
                            C√¥ng ngh·ªá ti√™n ti·∫øn
                          </li>
                          <li className="flex items-center">
                            <span className="text-green-500 mr-2">‚úì</span>
                            H·ªó tr·ª£ chuy√™n bi·ªát
                          </li>
                        </>
                      )}
                    </ul>
                  </div>
                </div>
              ))}
            </div>

            {/* Additional Info */}
            <div className="mt-10 p-6 bg-gradient-to-r from-orange-100 to-red-100 rounded-lg mx-4">
              <h3 className="text-lg font-bold text-gray-800 mb-2">
                üí° L∆∞u √Ω quan tr·ªçng
              </h3>
              <p className="text-gray-700 text-sm">
                T·∫•t c·∫£ c√°c g√≥i ƒë·ªÅu h·ªó tr·ª£ ƒëƒÉng b√†i t√¨m b·∫°n c√πng ph√≤ng v√† cho
                thu√™ ph√≤ng. Thanh to√°n m·ªôt l·∫ßn, s·ª≠ d·ª•ng ngay l·∫≠p t·ª©c. H·ªó tr·ª£
                kh√°ch h√†ng 24/7.
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Packages Modal */}
      {showPackagesModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg max-w-4xl w-full max-h-[90vh] overflow-hidden">
            {/* Modal Header */}
            <div className="bg-gradient-to-r from-orange-500 to-red-500 text-white p-4 flex justify-between items-center">
              <h2 className="text-2xl font-bold flex items-center">
                <span className="text-3xl mr-2">üì¶</span>
                G√≥i hi·ªán t·∫°i c·ªßa b·∫°n
              </h2>
              <button
                onClick={() => setShowPackagesModal(false)}
                className="text-white hover:text-gray-200 text-2xl font-bold w-8 h-8 flex items-center justify-center rounded-full hover:bg-white hover:bg-opacity-20 transition-colors"
              >
                √ó
              </button>
            </div>

            {/* Modal Content */}
            <div className="p-6 overflow-y-auto max-h-[calc(90vh-80px)]">
              {packagesLoading ? (
                <div className="flex justify-center py-8">
                  <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-orange-500"></div>
                </div>
              ) : userPackages.length === 0 ? (
                <div className="text-center py-8">
                  <div className="text-6xl mb-4">üì≠</div>
                  <h3 className="text-xl font-bold text-gray-800 mb-2">
                    B·∫°n ch∆∞a c√≥ g√≥i n√†o
                  </h3>
                  <p className="text-gray-600">
                    H√£y mua g√≥i ƒë·ªÉ b·∫Øt ƒë·∫ßu ƒëƒÉng b√†i!
                  </p>
                </div>
              ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  {userPackages.map((userPackage) => {
                    const status = getPackageStatus(userPackage.expiredAt);
                    const packageInfo = packageDetails[userPackage.packageName];

                    return (
                      <div
                        key={userPackage.packageId}
                        className="bg-gradient-to-r from-gray-50 to-gray-100 rounded-lg shadow-lg p-6 border-l-4 border-orange-500"
                      >
                        {/* Package Header */}
                        <div className="flex items-center justify-between mb-4">
                          <div className="flex items-center">
                            <span className="text-4xl mr-3">
                              {packageInfo?.icon || "üì¶"}
                            </span>
                            <div>
                              <h4 className="text-2xl font-bold text-gray-800">
                                {userPackage.packageName}
                              </h4>
                              <p className="text-gray-600 text-sm">
                                ID: #{userPackage.packageId}
                              </p>
                            </div>
                          </div>
                          <span
                            className={`px-3 py-1 rounded-full text-sm font-bold ${status.color}`}
                          >
                            {status.status}
                          </span>
                        </div>

                        {/* Package Stats */}
                        <div className="bg-white rounded-lg p-4 mb-4">
                          <div className="grid grid-cols-1 gap-3">
                            <div className="flex justify-between items-center">
                              <span className="text-gray-600 font-medium">
                                B√†i ƒëƒÉng c√≤n l·∫°i:
                              </span>
                              <div className="flex items-center">
                                <span className="text-2xl font-bold text-orange-600 mr-2">
                                  {userPackage.remainingPosts}
                                </span>
                                <span className="text-orange-500">üìù</span>
                              </div>
                            </div>

                            <div className="flex justify-between items-center">
                              <span className="text-gray-600 font-medium">
                                Ng√†y b·∫Øt ƒë·∫ßu:
                              </span>
                              <span className="font-bold text-gray-800">
                                üìÖ {formatDate(userPackage.startDate)}
                              </span>
                            </div>

                            <div className="flex justify-between items-center">
                              <span className="text-gray-600 font-medium">
                                Ng√†y h·∫øt h·∫°n:
                              </span>
                              <span className="font-bold text-gray-800">
                                ‚è∞ {formatDate(userPackage.expiredAt)}
                              </span>
                            </div>
                          </div>
                        </div>

                        {/* Package Description */}
                        {packageInfo && (
                          <div className="bg-orange-50 rounded-lg p-3 border border-orange-200">
                            <p className="text-gray-700 text-sm">
                              {packageInfo.description}
                            </p>
                          </div>
                        )}
                      </div>
                    );
                  })}
                </div>
              )}
            </div>

            {/* Modal Footer */}
            <div className="bg-gray-50 p-4 flex justify-end">
              <button
                onClick={() => setShowPackagesModal(false)}
                className="bg-gray-500 hover:bg-gray-600 text-white px-6 py-2 rounded-lg font-semibold transition-colors"
              >
                ƒê√≥ng
              </button>
            </div>
          </div>
        </div>
      )}
    </SidebarNav>
  );
};

export default Package;
